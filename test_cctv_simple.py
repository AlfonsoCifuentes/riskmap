#!/usr/bin/env python3
"""
Test Simplificado del Sistema CCTV
Verifica funcionalidad b√°sica sin dependencias problem√°ticas
"""

import sys
import os
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_basic_imports():
    """Test de importaciones b√°sicas"""
    print("üîç Verificando importaciones b√°sicas...")
    
    # Test basic Python modules
    try:
        import json
        import threading
        import time
        from datetime import datetime
        print("  ‚úÖ M√≥dulos Python b√°sicos")
    except Exception as e:
        print(f"  ‚ùå Error en m√≥dulos Python b√°sicos: {e}")
        return False
    
    # Test Flask
    try:
        from flask import Flask, render_template, jsonify
        print("  ‚úÖ Flask")
    except Exception as e:
        print(f"  ‚ùå Error en Flask: {e}")
        return False
    
    # Test computer vision
    try:
        import cv2
        print(f"  ‚úÖ OpenCV {cv2.__version__}")
    except Exception as e:
        print(f"  ‚ùå Error en OpenCV: {e}")
        return False
        
    return True

def test_cctv_files():
    """Test de archivos del sistema CCTV"""
    print("\nüîç Verificando archivos del sistema CCTV...")
    
    required_files = [
        'data/cameras.json',
        'data/conflict_zones.geojson',
        'cams/__init__.py',
        'cams/detector.py',
        'cams/resolver.py',
        'cams/recorder.py',
        'cams/alerts.py',
        'cams/routes.py',
        'cams/templates/cams_map.html',
        'cams/templates/cams_view.html',
        'cams/templates/review.html'
    ]
    
    all_exist = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} - NO ENCONTRADO")
            all_exist = False
    
    return all_exist

def test_data_files_content():
    """Test del contenido de archivos de datos"""
    print("\nüîç Verificando contenido de archivos de datos...")
    
    try:
        import json
        
        # Test cameras.json
        with open('data/cameras.json', 'r', encoding='utf-8') as f:
            cameras_data = json.load(f)
            
        # Check if it's an array or object with cameras property
        if isinstance(cameras_data, list):
            cameras_count = len(cameras_data)
            print(f"  ‚úÖ cameras.json - {cameras_count} c√°maras configuradas")
        elif isinstance(cameras_data, dict) and 'cameras' in cameras_data:
            cameras_count = len(cameras_data['cameras'])
            print(f"  ‚úÖ cameras.json - {cameras_count} c√°maras configuradas")
        else:
            print("  ‚ö†Ô∏è  cameras.json - Estructura no reconocida")
            
        # Test conflict_zones.geojson
        with open('data/conflict_zones.geojson', 'r', encoding='utf-8') as f:
            zones_data = json.load(f)
            
        if 'features' in zones_data and len(zones_data['features']) > 0:
            print(f"  ‚úÖ conflict_zones.geojson - {len(zones_data['features'])} zonas configuradas")
        else:
            print("  ‚ö†Ô∏è  conflict_zones.geojson - Sin zonas configuradas")
            
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error leyendo archivos de datos: {e}")
        return False

def test_flask_app_integration():
    """Test de integraci√≥n con la app Flask"""
    print("\nüîç Verificando integraci√≥n con app_BUENA.py...")
    
    try:
        with open('app_BUENA.py', 'r', encoding='utf-8') as f:
            content = f.read()
            
        checks = [
            ('from cams import CCTVSystem', 'Importaci√≥n CCTVSystem'),
            ('from cams.routes import register_cctv_routes', 'Importaci√≥n rutas CCTV'),
            ('cctv_system_initialized', 'Estado CCTV en system_state'),
            ('register_cctv_routes', 'Registro de rutas CCTV')
        ]
        
        all_found = True
        for check, description in checks:
            if check in content:
                print(f"  ‚úÖ {description}")
            else:
                print(f"  ‚ùå {description} - NO ENCONTRADO")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"  ‚ùå Error verificando app_BUENA.py: {e}")
        return False

def test_templates():
    """Test de templates HTML"""
    print("\nüîç Verificando templates HTML...")
    
    templates = [
        ('cams/templates/cams_map.html', 'Mapa de c√°maras'),
        ('cams/templates/cams_view.html', 'Vista en vivo'),
        ('cams/templates/review.html', 'Revisi√≥n de grabaciones')
    ]
    
    all_valid = True
    for template_path, description in templates:
        try:
            with open(template_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            if len(content) > 1000 and '<html' in content and '</html>' in content:
                print(f"  ‚úÖ {description} - Template v√°lido")
            else:
                print(f"  ‚ö†Ô∏è  {description} - Template muy peque√±o o incompleto")
                
        except Exception as e:
            print(f"  ‚ùå {description} - Error: {e}")
            all_valid = False
    
    return all_valid

def main():
    """Funci√≥n principal de testing simplificado"""
    print("üöÄ Test Simplificado del Sistema CCTV\n")
    
    # Tests
    imports_ok = test_basic_imports()
    files_ok = test_cctv_files()
    data_ok = test_data_files_content()
    integration_ok = test_flask_app_integration()
    templates_ok = test_templates()
    
    # Resumen
    print("\n" + "="*50)
    print("üìä RESUMEN DE TESTS SIMPLIFICADOS")
    print("="*50)
    
    print(f"Importaciones b√°sicas: {'‚úÖ OK' if imports_ok else '‚ùå ERROR'}")
    print(f"Archivos del sistema: {'‚úÖ OK' if files_ok else '‚ùå ERROR'}")
    print(f"Archivos de datos: {'‚úÖ OK' if data_ok else '‚ùå ERROR'}")
    print(f"Integraci√≥n Flask: {'‚úÖ OK' if integration_ok else '‚ùå ERROR'}")
    print(f"Templates HTML: {'‚úÖ OK' if templates_ok else '‚ùå ERROR'}")
    
    # Estado general
    all_tests = [imports_ok, files_ok, data_ok, integration_ok, templates_ok]
    
    if all(all_tests):
        print("\nüéâ SISTEMA CCTV ESTRUCTURALMENTE COMPLETO")
        print("‚úÖ Todos los archivos est√°n en su lugar")
        print("‚úÖ Integraci√≥n con RiskMap completada")
        print("‚úÖ Templates HTML funcionales")
        print("\nüîß Para funcionalidad completa:")
        print("   1. Resolver problemas de dependencias NumPy/ML")
        print("   2. Instalar FFmpeg del sistema si es necesario")
        print("   3. Configurar Redis para procesamiento background")
        return 0
    else:
        failed_tests = [name for test, name in zip(all_tests, 
            ['Importaciones', 'Archivos', 'Datos', 'Integraci√≥n', 'Templates']) if not test]
        print(f"\n‚ö†Ô∏è  SISTEMA CCTV CON PROBLEMAS EN: {', '.join(failed_tests)}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
