#!/usr/bin/env python3
"""
Script para actualizar las fuentes de art√≠culos que est√°n marcados como "RSS Feed"
usando an√°lisis BERT para detectar la fuente real.
"""

import sqlite3
import sys
import os
from pathlib import Path

# Add src to path
sys.path.append(str(Path(__file__).parent / 'src'))

from dashboard.ai_models.source_detector import source_detector
from utils.config import logger

def update_rss_feed_sources(limit=None, dry_run=False):
    """
    Actualiza las fuentes de art√≠culos marcados como 'RSS Feed'
    
    Args:
        limit: N√∫mero m√°ximo de art√≠culos a procesar (None para todos)
        dry_run: Si True, solo muestra qu√© cambios se har√≠an sin aplicarlos
    """
    
    # Conectar a la base de datos
    db_path = Path(__file__).parent / 'data' / 'geopolitical_intel.db'
    conn = sqlite3.connect(str(db_path))
    cursor = conn.cursor()
    
    try:
        # Obtener artÔøΩÔøΩculos con fuente "RSS Feed"
        query = """
            SELECT id, title, content, url, source 
            FROM articles 
            WHERE source = 'RSS Feed' OR source = 'RSS' OR source = 'Feed'
            ORDER BY created_at DESC
        """
        
        if limit:
            query += f" LIMIT {limit}"
        
        cursor.execute(query)
        articles = cursor.fetchall()
        
        if not articles:
            print("‚úÖ No se encontraron art√≠culos con fuente 'RSS Feed' para procesar")
            return
        
        print(f"üîç Encontrados {len(articles)} art√≠culos con fuente RSS para procesar")
        
        updated_count = 0
        failed_count = 0
        
        for i, (article_id, title, content, url, current_source) in enumerate(articles, 1):
            try:
                print(f"\nüì∞ Procesando art√≠culo {i}/{len(articles)}: {title[:60]}...")
                
                # Preparar datos del art√≠culo para el detector
                article_data = {
                    'id': article_id,
                    'title': title or '',
                    'content': content or '',
                    'url': url or '',
                    'source': current_source
                }
                
                # Detectar la fuente real
                detected_source = source_detector.analyze_article_metadata(article_data)
                
                # Solo actualizar si se detect√≥ una fuente diferente y v√°lida
                if detected_source and detected_source != current_source and detected_source not in ['RSS Feed', 'Feed', 'RSS', 'Agencia Internacional']:
                    print(f"   üéØ Fuente detectada: {detected_source}")
                    
                    if not dry_run:
                        # Actualizar en la base de datos
                        cursor.execute(
                            "UPDATE articles SET source = ? WHERE id = ?",
                            (detected_source, article_id)
                        )
                        updated_count += 1
                        print(f"   ‚úÖ Actualizado: {current_source} ‚Üí {detected_source}")
                    else:
                        print(f"   üîÑ [DRY RUN] Cambiar√≠a: {current_source} ‚Üí {detected_source}")
                        updated_count += 1
                else:
                    print(f"   ‚ö†Ô∏è  No se pudo detectar fuente espec√≠fica (detectado: {detected_source})")
                    failed_count += 1
                
            except Exception as e:
                print(f"   ‚ùå Error procesando art√≠culo {article_id}: {e}")
                failed_count += 1
                continue
        
        if not dry_run:
            # Confirmar cambios
            conn.commit()
            print(f"\n‚úÖ Proceso completado:")
            print(f"   üìä Art√≠culos actualizados: {updated_count}")
            print(f"   ‚ùå Art√≠culos fallidos: {failed_count}")
        else:
            print(f"\nüîÑ [DRY RUN] Resumen:")
            print(f"   üìä Art√≠culos que se actualizar√≠an: {updated_count}")
            print(f"   ‚ùå Art√≠culos que fallar√≠an: {failed_count}")
        
        # Mostrar estad√≠sticas de fuentes despu√©s del procesamiento
        print(f"\nüìà Estad√≠sticas de fuentes actualizadas:")
        cursor.execute("""
            SELECT source, COUNT(*) as count 
            FROM articles 
            WHERE source IS NOT NULL 
            GROUP BY source 
            ORDER BY count DESC 
            LIMIT 15
        """)
        
        for source, count in cursor.fetchall():
            print(f"   {source}: {count} art√≠culos")
            
    except Exception as e:
        logger.error(f"Error en update_rss_feed_sources: {e}")
        print(f"‚ùå Error: {e}")
    finally:
        conn.close()

def show_rss_feed_stats():
    """Muestra estad√≠sticas de art√≠culos con fuente RSS Feed"""
    db_path = Path(__file__).parent / 'data' / 'geopolitical_intel.db'
    conn = sqlite3.connect(str(db_path))
    cursor = conn.cursor()
    
    try:
        # Contar art√≠culos con RSS Feed
        cursor.execute("""
            SELECT COUNT(*) 
            FROM articles 
            WHERE source IN ('RSS Feed', 'RSS', 'Feed')
        """)
        rss_count = cursor.fetchone()[0]
        
        # Contar total de art√≠culos
        cursor.execute("SELECT COUNT(*) FROM articles")
        total_count = cursor.fetchone()[0]
        
        print(f"üìä Estad√≠sticas de fuentes RSS:")
        print(f"   üì∞ Total de art√≠culos: {total_count}")
        print(f"   üì° Art√≠culos con 'RSS Feed': {rss_count}")
        print(f"   üìà Porcentaje RSS: {(rss_count/total_count*100):.1f}%")
        
        # Mostrar ejemplos de art√≠culos RSS
        cursor.execute("""
            SELECT id, title, url, created_at 
            FROM articles 
            WHERE source IN ('RSS Feed', 'RSS', 'Feed')
            ORDER BY created_at DESC 
            LIMIT 5
        """)
        
        print(f"\nüîç Ejemplos de art√≠culos con fuente RSS:")
        for article_id, title, url, created_at in cursor.fetchall():
            print(f"   {article_id}: {title[:50]}...")
            if url:
                print(f"      URL: {url}")
            print(f"      Fecha: {created_at}")
            print()
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Actualizar fuentes RSS con detecci√≥n BERT")
    parser.add_argument("--limit", type=int, help="N√∫mero m√°ximo de art√≠culos a procesar")
    parser.add_argument("--dry-run", action="store_true", help="Solo mostrar cambios sin aplicarlos")
    parser.add_argument("--stats", action="store_true", help="Mostrar estad√≠sticas de fuentes RSS")
    
    args = parser.parse_args()
    
    if args.stats:
        show_rss_feed_stats()
    else:
        print("üöÄ Iniciando actualizaci√≥n de fuentes RSS con detecci√≥n BERT...")
        update_rss_feed_sources(limit=args.limit, dry_run=args.dry_run)