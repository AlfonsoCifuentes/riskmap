"""
Script de Prueba - An√°lisis Geopol√≠tico con Groq
===============================================

Este script permite probar la funcionalidad de an√°lisis geopol√≠tico
de manera independiente, sin necesidad del servidor Flask completo.

Uso:
    python test_groq_standalone.py

Requisitos:
    - groq (pip install groq)
    - python-dotenv (pip install python-dotenv)
    - Archivo .env con GROQ_API_KEY
"""

import os
import json
import sys
from datetime import datetime
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def get_sample_articles():
    """Obtiene art√≠culos de muestra para el an√°lisis"""
    return [
        {
            'id': 1,
            'title': 'Escalada militar en conflicto internacional',
            'content': 'Las tensiones militares han aumentado significativamente en la regi√≥n con movilizaci√≥n de tropas y declaraciones oficiales que indican una posible escalada del conflicto. Los l√≠deres mundiales expresan preocupaci√≥n por las implicaciones.',
            'location': 'Europa Oriental',
            'risk_score': 0.8,
            'source': 'Reuters'
        },
        {
            'id': 2,
            'title': 'Crisis diplom√°tica entre potencias mundiales',
            'content': 'Las relaciones bilaterales se han deteriorado tras las √∫ltimas declaraciones oficiales, generando incertidumbre en los mercados internacionales y afectando las cadenas de suministro globales.',
            'location': 'Asia-Pac√≠fico',
            'risk_score': 0.7,
            'source': 'BBC'
        },
        {
            'id': 3,
            'title': 'Amenaza nuclear aumenta tensiones regionales',
            'content': 'Expertos en seguridad expresan preocupaci√≥n por el desarrollo de capacidades nucleares en la regi√≥n, escalando las tensiones internacionales y provocando respuestas diplom√°ticas.',
            'location': 'Asia Pacific',
            'risk_score': 0.95,
            'source': 'CNN'
        },
        {
            'id': 4,
            'title': 'Cumbre econ√≥mica busca estabilidad global',
            'content': 'Los l√≠deres mundiales se re√∫nen para discutir medidas econ√≥micas coordinadas que permitan estabilizar los mercados y fortalecer la cooperaci√≥n internacional en tiempos de incertidumbre.',
            'location': 'Geneva',
            'risk_score': 0.3,
            'source': 'AP News'
        },
        {
            'id': 5,
            'title': 'Movimientos estrat√©gicos en sector energ√©tico',
            'content': 'Los √∫ltimos desarrollos en el sector energ√©tico indican cambios importantes en las alianzas comerciales globales, con implicaciones geopol√≠ticas significativas para el equilibrio de poder.',
            'location': 'Medio Oriente',
            'risk_score': 0.6,
            'source': 'Financial Times'
        }
    ]

def test_groq_analysis_standalone():
    """
    Prueba el an√°lisis Groq de manera independiente
    """
    try:
        print("üöÄ Iniciando prueba del an√°lisis geopol√≠tico con Groq...")
        
        # Verificar API Key
        api_key = os.getenv('GROQ_API_KEY')
        if not api_key:
            print("‚ùå Error: GROQ_API_KEY no encontrada en el archivo .env")
            print("üí° Aseg√∫rate de tener un archivo .env con: GROQ_API_KEY=tu_clave_aqu√≠")
            return False
        
        print(f"‚úÖ API Key encontrada: {'*' * 10}{api_key[-4:]}")
        
        # Importar Groq
        try:
            from groq import Groq
            print("‚úÖ Librer√≠a Groq importada correctamente")
        except ImportError:
            print("‚ùå Error: Librer√≠a Groq no instalada")
            print("üí° Instala con: pip install groq")
            return False
        
        # Obtener art√≠culos de muestra
        articles = get_sample_articles()
        print(f"üì∞ Art√≠culos de muestra obtenidos: {len(articles)}")
        
        # Preparar contexto
        articles_context = "\n\n".join([
            f"ART√çCULO {i+1}:\nT√≠tulo: {article['title']}\nContenido: {article['content']}\nUbicaci√≥n: {article['location']}\nRiesgo: {article['risk_score']}"
            for i, article in enumerate(articles)
        ])
        
        # Crear prompt
        prompt = f"""
        Eres un periodista experto en geopol√≠tica con 25 a√±os de experiencia. Analiza los siguientes {len(articles)} art√≠culos y genera un an√°lisis geopol√≠tico profesional.

        ART√çCULOS:
        {articles_context}

        INSTRUCCIONES:
        1. Escribe en espa√±ol con estilo period√≠stico humano
        2. Menciona l√≠deres pol√≠ticos espec√≠ficos cuando sea relevante
        3. Conecta los eventos y analiza tendencias
        4. Usa p√°rrafos HTML (<p>) para el contenido
        5. Enfatiza conceptos clave con <strong>

        RESPONDE SOLO CON JSON:
        {{
          "title": "Titular impactante y profesional",
          "subtitle": "Subt√≠tulo que resuma el an√°lisis",
          "content": "Contenido completo en HTML con p√°rrafos <p>",
          "sources_count": {len(articles)}
        }}
        """
        
        # Inicializar cliente Groq
        client = Groq(api_key=api_key)
        print("ü§ñ Cliente Groq inicializado, generando an√°lisis...")
        
        # Llamada a la API
        response = client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": "Eres un analista geopol√≠tico experto. Respondes √öNICAMENTE en formato JSON v√°lido."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            model="llama-3.1-8b-instant",
            temperature=0.7,
            max_tokens=2500,
            response_format={"type": "json_object"}
        )
        
        # Procesar respuesta
        response_content = response.choices[0].message.content
        print("‚úÖ Respuesta recibida de Groq")
        
        try:
            analysis_data = json.loads(response_content)
            print("‚úÖ JSON parseado correctamente")
            
            # Mostrar resultados
            print("\n" + "="*60)
            print("üìä RESULTADO DEL AN√ÅLISIS GEOPOL√çTICO")
            print("="*60)
            print(f"üì∞ T√≠tulo: {analysis_data.get('title', 'N/A')}")
            print(f"üìù Subt√≠tulo: {analysis_data.get('subtitle', 'N/A')}")
            print(f"üìÑ Contenido: {len(analysis_data.get('content', ''))} caracteres")
            print(f"üìö Fuentes: {analysis_data.get('sources_count', 0)}")
            print("="*60)
            
            # Guardar resultado
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"groq_analysis_test_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(analysis_data, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ Resultado guardado en: {filename}")
            
            # Mostrar preview del contenido
            content = analysis_data.get('content', '')
            if content:
                print("\nüìñ Preview del contenido:")
                print("-" * 40)
                # Mostrar primeros 300 caracteres
                preview = content.replace('<p>', '').replace('</p>', '\n').replace('<strong>', '**').replace('</strong>', '**')
                print(preview[:300] + "..." if len(preview) > 300 else preview)
                print("-" * 40)
            
            return True
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Error parseando JSON: {e}")
            print(f"üîç Contenido recibido: {response_content[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Error general: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üåç Test Independiente - An√°lisis Geopol√≠tico Groq")
    print("=" * 50)
    
    success = test_groq_analysis_standalone()
    
    if success:
        print("\n‚úÖ Prueba completada exitosamente")
        print("üéâ El an√°lisis geopol√≠tico con Groq est√° funcionando correctamente")
    else:
        print("\n‚ùå Prueba fallida")
        print("üîß Revisa la configuraci√≥n y vuelve a intentar")
    
    print("\nüëã Fin de la prueba")
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
