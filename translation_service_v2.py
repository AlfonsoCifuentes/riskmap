#!/usr/bin/env python3
"""
Servicio de Traducci√≥n Anti-Error v2.0

Servicio principal de traducci√≥n que integra m√∫ltiples sistemas robustos
para evitar cualquier error relacionado con httpcore/httpx o dependencias.

Changelog v2.0:
- Integra el sistema ultra-robusto v3.0
- Eliminado completamente httpcore/httpx directo
- Usa solo urllib y requests con manejo de errores avanzado
- Cache persistente y rate limiting inteligente
- Fallbacks m√∫ltiples sin dependencias problem√°ticas
"""

import os
import sys
import logging
import traceback
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime

# Configurar logging robusto
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Importar nuestro sistema ultra-robusto
try:
    from robust_translation_v3 import UltraRobustTranslationService, get_ultra_robust_translation
    logger.info("‚úÖ Sistema ultra-robusto v3.0 importado correctamente")
except ImportError as e:
    logger.error(f"‚ùå Error importando sistema ultra-robusto: {e}")
    # Fallback a sistema b√°sico
    UltraRobustTranslationService = None
    get_ultra_robust_translation = None

class TranslationService:
    """
    Servicio principal de traducci√≥n anti-error.
    
    Este servicio garantiza que NUNCA fallar√°n las traducciones,
    usando m√∫ltiples sistemas de fallback sin dependencias problem√°ticas.
    """
    
    def __init__(self):
        """Inicializar el servicio anti-error."""
        self.translation_history = []
        self.error_count = 0
        self.success_count = 0
        
        # Inicializar sistema ultra-robusto
        try:
            if UltraRobustTranslationService:
                self.ultra_robust_service = UltraRobustTranslationService()
                logger.info("‚úÖ Servicio ultra-robusto inicializado")
            else:
                self.ultra_robust_service = None
                logger.warning("‚ö†Ô∏è Sistema ultra-robusto no disponible")
        except Exception as e:
            logger.error(f"‚ùå Error inicializando sistema ultra-robusto: {e}")
            self.ultra_robust_service = None
        
        # Sistema de fallback b√°sico usando solo stdlib
        self.basic_translations = {
            'en_to_es': {
                'news': 'noticias', 'breaking': '√∫ltima hora', 'conflict': 'conflicto',
                'war': 'guerra', 'attack': 'ataque', 'explosion': 'explosi√≥n',
                'terror': 'terror', 'violence': 'violencia', 'death': 'muerte',
                'killed': 'muerto', 'injured': 'herido', 'emergency': 'emergencia',
                'crisis': 'crisis', 'protest': 'protesta', 'government': 'gobierno',
                'police': 'polic√≠a', 'military': 'militar', 'president': 'presidente',
                'security': 'seguridad', 'international': 'internacional',
                'national': 'nacional', 'local': 'local', 'today': 'hoy',
                'yesterday': 'ayer', 'morning': 'ma√±ana', 'afternoon': 'tarde',
                'evening': 'noche', 'sources': 'fuentes', 'officials': 'funcionarios',
                'report': 'reporte', 'confirmed': 'confirm√≥', 'announced': 'anunci√≥'
            }
        }
        
        logger.info("‚úÖ TranslationService v2.0 inicializado completamente")
    
    def _log_translation_attempt(self, text: str, target_lang: str, method: str, success: bool, result: str = ""):
        """Registrar intento de traducci√≥n para estad√≠sticas."""
        self.translation_history.append({
            'timestamp': datetime.now().isoformat(),
            'text': text[:100] + "..." if len(text) > 100 else text,
            'target_lang': target_lang,
            'method': method,
            'success': success,
            'result': result[:100] + "..." if len(result) > 100 else result
        })
        
        if success:
            self.success_count += 1
        else:
            self.error_count += 1
    
    def _detect_language_basic(self, text: str) -> str:
        """Detecci√≥n b√°sica de idioma usando solo stdlib."""
        if not text or len(text.strip()) < 3:
            return 'unknown'
        
        text_lower = text.lower()
        
        # Palabras indicadoras de espa√±ol
        spanish_indicators = ['el ', 'la ', 'de ', 'que ', 'y ', 'en ', 'un ', 'es ', 'se ', 'no ', 'te ', 'lo ', 'le ', 'por ', 'con ', 'para ', 'una ', 'est√° ', 'han ', 'muy ', 'm√°s ', 'como ', 'pero ']
        spanish_count = sum(1 for indicator in spanish_indicators if indicator in text_lower + ' ')
        
        # Palabras indicadoras de ingl√©s
        english_indicators = ['the ', 'and ', 'for ', 'are ', 'but ', 'not ', 'you ', 'all ', 'can ', 'had ', 'her ', 'was ', 'one ', 'our ', 'out ', 'day ', 'get ', 'has ', 'him ', 'his ', 'how ', 'its ', 'may ', 'new ', 'now ', 'old ', 'see ', 'two ', 'who ']
        english_count = sum(1 for indicator in english_indicators if indicator in text_lower + ' ')
        
        # Caracteres espec√≠ficos del espa√±ol
        spanish_chars = sum(1 for char in '√±√°√©√≠√≥√∫¬ø¬°' if char in text_lower)
        
        if spanish_count > english_count or spanish_chars > 0:
            return 'es'
        elif english_count > 0:
            return 'en'
        else:
            return 'unknown'
    
    def _basic_dictionary_translation(self, text: str, target_lang: str) -> str:
        """Traducci√≥n b√°sica usando solo diccionario sin APIs externas."""
        if target_lang != 'es':
            return text
        
        detected_lang = self._detect_language_basic(text)
        if detected_lang == 'es':
            return text
        
        if detected_lang == 'en':
            translations = self.basic_translations.get('en_to_es', {})
            translated = text
            
            # Aplicar traducciones palabra por palabra
            for en_word, es_word in translations.items():
                # Reemplazar manteniendo may√∫sculas/min√∫sculas
                patterns = [
                    (f' {en_word} ', f' {es_word} '),
                    (f' {en_word.title()} ', f' {es_word.title()} '),
                    (f' {en_word.upper()} ', f' {es_word.upper()} '),
                    (f'{en_word} ', f'{es_word} '),  # Al inicio
                    (f' {en_word}', f' {es_word}')   # Al final
                ]
                
                for pattern_en, pattern_es in patterns:
                    if pattern_en in translated:
                        translated = translated.replace(pattern_en, pattern_es)
            
            if translated != text:
                logger.info("‚úÖ Traducci√≥n b√°sica aplicada")
                return translated
        
        return text
    
    def translate_text(self, text: str, target_language: str = 'es') -> Tuple[str, str]:
        """
        Traducir texto usando sistema anti-error multinivel.
        
        Args:
            text: Texto a traducir
            target_language: Idioma destino (por defecto 'es')
        
        Returns:
            Tupla con (texto_traducido, idioma_detectado)
        """
        if not text or len(text.strip()) < 3:
            return text, 'unknown'
        
        text = text.strip()
        start_time = datetime.now()
        
        logger.info(f"üîÑ Iniciando traducci√≥n: '{text[:50]}...' -> {target_language}")
        
        # Nivel 1: Sistema Ultra-Robusto v3.0
        if self.ultra_robust_service:
            try:
                translated, detected_lang = self.ultra_robust_service.translate_text(text, target_language)
                if translated and translated != text:
                    elapsed = (datetime.now() - start_time).total_seconds()
                    logger.info(f"‚úÖ Traducci√≥n exitosa con sistema ultra-robusto en {elapsed:.2f}s")
                    self._log_translation_attempt(text, target_language, 'ultra_robust', True, translated)
                    return translated, detected_lang
                else:
                    logger.warning("‚ö†Ô∏è Sistema ultra-robusto no devolvi√≥ traducci√≥n v√°lida")
            except Exception as e:
                logger.error(f"‚ùå Error en sistema ultra-robusto: {e}")
                self._log_translation_attempt(text, target_language, 'ultra_robust', False)
        
        # Nivel 2: Funci√≥n de conveniencia ultra-robusta
        if get_ultra_robust_translation:
            try:
                translated, detected_lang = get_ultra_robust_translation(text, target_language)
                if translated and translated != text:
                    elapsed = (datetime.now() - start_time).total_seconds()
                    logger.info(f"‚úÖ Traducci√≥n exitosa con funci√≥n ultra-robusta en {elapsed:.2f}s")
                    self._log_translation_attempt(text, target_language, 'ultra_robust_func', True, translated)
                    return translated, detected_lang
            except Exception as e:
                logger.error(f"‚ùå Error en funci√≥n ultra-robusta: {e}")
                self._log_translation_attempt(text, target_language, 'ultra_robust_func', False)
        
        # Nivel 3: Traducci√≥n b√°sica con diccionario
        try:
            detected_lang = self._detect_language_basic(text)
            translated = self._basic_dictionary_translation(text, target_language)
            
            if translated != text:
                elapsed = (datetime.now() - start_time).total_seconds()
                logger.info(f"‚úÖ Traducci√≥n exitosa con diccionario b√°sico en {elapsed:.2f}s")
                self._log_translation_attempt(text, target_language, 'basic_dict', True, translated)
                return translated, detected_lang
        except Exception as e:
            logger.error(f"‚ùå Error en traducci√≥n b√°sica: {e}")
            self._log_translation_attempt(text, target_language, 'basic_dict', False)
        
        # Nivel 4: √öltimo recurso - retornar original con detecci√≥n b√°sica
        detected_lang = self._detect_language_basic(text)
        elapsed = (datetime.now() - start_time).total_seconds()
        logger.warning(f"‚ö†Ô∏è No se pudo traducir, retornando original en {elapsed:.2f}s")
        self._log_translation_attempt(text, target_language, 'fallback_original', False, text)
        
        return text, detected_lang
    
    def get_translation_stats(self) -> Dict[str, Any]:
        """Obtener estad√≠sticas del servicio de traducci√≥n."""
        total_attempts = self.success_count + self.error_count
        success_rate = (self.success_count / total_attempts * 100) if total_attempts > 0 else 0
        
        return {
            'total_attempts': total_attempts,
            'successful_translations': self.success_count,
            'failed_translations': self.error_count,
            'success_rate_percent': round(success_rate, 2),
            'ultra_robust_available': self.ultra_robust_service is not None,
            'recent_history': self.translation_history[-10:] if self.translation_history else []
        }
    
    def test_translation_capabilities(self) -> Dict[str, Any]:
        """Testear capacidades de traducci√≥n disponibles."""
        test_text = "Breaking news: Emergency situation reported"
        results = {}
        
        # Test sistema ultra-robusto
        if self.ultra_robust_service:
            try:
                translated, detected = self.ultra_robust_service.translate_text(test_text, 'es')
                results['ultra_robust'] = {
                    'available': True,
                    'test_result': translated,
                    'detected_lang': detected,
                    'success': translated != test_text
                }
            except Exception as e:
                results['ultra_robust'] = {
                    'available': True,
                    'error': str(e),
                    'success': False
                }
        else:
            results['ultra_robust'] = {'available': False}
        
        # Test funci√≥n de conveniencia
        if get_ultra_robust_translation:
            try:
                translated, detected = get_ultra_robust_translation(test_text, 'es')
                results['ultra_robust_func'] = {
                    'available': True,
                    'test_result': translated,
                    'detected_lang': detected,
                    'success': translated != test_text
                }
            except Exception as e:
                results['ultra_robust_func'] = {
                    'available': True,
                    'error': str(e),
                    'success': False
                }
        else:
            results['ultra_robust_func'] = {'available': False}
        
        # Test traducci√≥n b√°sica
        try:
            translated = self._basic_dictionary_translation(test_text, 'es')
            results['basic_dict'] = {
                'available': True,
                'test_result': translated,
                'success': translated != test_text
            }
        except Exception as e:
            results['basic_dict'] = {
                'available': True,
                'error': str(e),
                'success': False
            }
        
        return results


# Instancia global del servicio
_global_translation_service = None

def get_translation_service() -> TranslationService:
    """Obtener instancia global del servicio de traducci√≥n."""
    global _global_translation_service
    
    if _global_translation_service is None:
        _global_translation_service = TranslationService()
    
    return _global_translation_service

def translate_text_safe(text: str, target_language: str = 'es') -> Tuple[str, str]:
    """
    Funci√≥n segura de traducci√≥n que nunca falla.
    
    Args:
        text: Texto a traducir
        target_language: Idioma destino
    
    Returns:
        Tupla con (texto_traducido, idioma_detectado)
    """
    try:
        service = get_translation_service()
        return service.translate_text(text, target_language)
    except Exception as e:
        logger.error(f"Error cr√≠tico en translate_text_safe: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return text, 'unknown'

# Alias para compatibilidad con c√≥digo existente
def translate_text(text: str, target_language: str = 'es') -> Tuple[str, str]:
    """Alias para compatibilidad con c√≥digo existente."""
    return translate_text_safe(text, target_language)

def detect_language(text: str) -> str:
    """
    Detectar idioma de texto de forma segura.
    
    Args:
        text: Texto para detectar idioma
    
    Returns:
        C√≥digo de idioma detectado
    """
    try:
        service = get_translation_service()
        return service._detect_language_basic(text)
    except Exception as e:
        logger.error(f"Error en detect_language: {e}")
        return 'unknown'


if __name__ == "__main__":
    # Test completo del servicio
    print("üß™ Testando TranslationService v2.0")
    print("=" * 50)
    
    service = TranslationService()
    
    # Test de capacidades
    capabilities = service.test_translation_capabilities()
    print("\nüìä Capacidades de traducci√≥n:")
    for method, result in capabilities.items():
        status = "‚úÖ" if result.get('success', False) else "‚ùå"
        available = "üü¢" if result.get('available', False) else "üî¥"
        print(f"{available} {method}: {status}")
        if 'test_result' in result:
            print(f"   Resultado: {result['test_result']}")
        if 'error' in result:
            print(f"   Error: {result['error']}")
    
    # Test de traducciones
    test_texts = [
        "Breaking news: Major conflict erupts in the region",
        "Government officials announce new security measures",
        "Emergency services respond to explosion in city center",
        "International observers monitor the developing situation"
    ]
    
    print("\nüîÑ Testando traducciones:")
    for i, test_text in enumerate(test_texts, 1):
        print(f"\nüìù Test {i}:")
        print(f"Original: {test_text}")
        
        translated, detected = service.translate_text(test_text, 'es')
        
        print(f"Traducido: {translated}")
        print(f"Idioma detectado: {detected}")
    
    # Estad√≠sticas finales
    stats = service.get_translation_stats()
    print(f"\nüìà Estad√≠sticas finales:")
    print(f"Total intentos: {stats['total_attempts']}")
    print(f"Exitosos: {stats['successful_translations']}")
    print(f"Fallidos: {stats['failed_translations']}")
    print(f"Tasa de √©xito: {stats['success_rate_percent']}%")
    print(f"Sistema ultra-robusto disponible: {stats['ultra_robust_available']}")
