#!/usr/bin/env python3
"""
Verificar que los cambios del mosaico est√°n funcionando correctamente:
1. Art√≠culos de alto riesgo aparecen primero
2. Todas las noticias del mosaico tienen imagen
3. Links abren en nueva pesta√±a
"""

import sqlite3
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def verify_mosaic_changes():
    """Verificar los cambios del mosaico"""
    
    print("üîç VERIFICACI√ìN DE CAMBIOS DEL MOSAICO")
    print("=" * 70)
    
    db_path = Path('data/geopolitical_intel.db')
    if not db_path.exists():
        print("‚ùå Base de datos no encontrada")
        return
    
    conn = sqlite3.connect(str(db_path))
    cursor = conn.cursor()
    
    # 1. Verificar que los art√≠culos de alto riesgo tienen imagen
    print("\nüìä VERIFICACI√ìN 1: Art√≠culos de alto riesgo con imagen")
    print("-" * 50)
    
    cursor.execute('''
        SELECT COUNT(*) 
        FROM articles 
        WHERE risk_level = 'high' 
        AND (image_url IS NOT NULL AND image_url != '')
    ''')
    high_risk_with_image = cursor.fetchone()[0]
    
    cursor.execute('''
        SELECT COUNT(*) 
        FROM articles 
        WHERE risk_level = 'high'
    ''')
    total_high_risk = cursor.fetchone()[0]
    
    print(f"‚úÖ Art√≠culos de alto riesgo con imagen: {high_risk_with_image}/{total_high_risk}")
    if total_high_risk > 0:
        coverage_percent = (high_risk_with_image / total_high_risk) * 100
        print(f"üìà Cobertura de imagen para alto riesgo: {coverage_percent:.1f}%")
    
    # 2. Verificar distribuci√≥n de art√≠culos en el mosaico
    print("\nüìä VERIFICACI√ìN 2: Distribuci√≥n en el mosaico")
    print("-" * 50)
    
    cursor.execute('''
        SELECT 
            risk_level,
            COUNT(*) as count,
            COUNT(CASE WHEN image_url IS NOT NULL AND image_url != '' THEN 1 END) as with_image
        FROM articles 
        WHERE risk_level IS NOT NULL
        GROUP BY risk_level
        ORDER BY 
            CASE 
                WHEN risk_level = 'high' THEN 1
                WHEN risk_level = 'medium' THEN 2
                WHEN risk_level = 'low' THEN 3
                ELSE 4
            END
    ''')
    
    distribution = cursor.fetchall()
    
    for risk_level, count, with_image in distribution:
        image_percent = (with_image / count * 100) if count > 0 else 0
        print(f"üéØ {risk_level.upper()}: {count} art√≠culos, {with_image} con imagen ({image_percent:.1f}%)")
    
    # 3. Verificar art√≠culos para el mosaico (top 50 m√°s recientes)
    print("\nüìä VERIFICACI√ìN 3: Top 50 art√≠culos para mosaico")
    print("-" * 50)
    
    cursor.execute('''
        SELECT 
            id, title, risk_level, risk_score, 
            CASE 
                WHEN image_url IS NOT NULL AND image_url != '' THEN 'S√ç'
                ELSE 'NO'
            END as tiene_imagen,
            published_at
        FROM articles 
        WHERE risk_level IN ('high', 'medium', 'low')
        ORDER BY 
            CASE 
                WHEN risk_level = 'high' THEN 1
                WHEN risk_level = 'medium' THEN 2
                WHEN risk_level = 'low' THEN 3
                ELSE 4
            END,
            risk_score DESC,
            published_at DESC
        LIMIT 50
    ''')
    
    mosaic_articles = cursor.fetchall()
    
    high_risk_count = 0
    medium_risk_count = 0
    low_risk_count = 0
    with_image_count = 0
    
    print("üèÜ PRIMEROS 10 ART√çCULOS DEL MOSAICO:")
    for i, (article_id, title, risk_level, risk_score, tiene_imagen, published_at) in enumerate(mosaic_articles[:10]):
        if risk_level == 'high':
            high_risk_count += 1
        elif risk_level == 'medium':
            medium_risk_count += 1
        elif risk_level == 'low':
            low_risk_count += 1
            
        if tiene_imagen == 'S√ç':
            with_image_count += 1
            
        emoji = "üî•" if risk_level == 'high' else "‚ö†Ô∏è" if risk_level == 'medium' else "üü¢"
        print(f"  {i+1:2d}. {emoji} [{risk_level.upper()}] {title[:60]}... (Imagen: {tiene_imagen})")
    
    # Contar todos los 50
    total_stats = {'high': 0, 'medium': 0, 'low': 0, 'with_image': 0}
    for article in mosaic_articles:
        risk_level = article[2]
        tiene_imagen = article[4]
        
        if risk_level in total_stats:
            total_stats[risk_level] += 1
        if tiene_imagen == 'S√ç':
            total_stats['with_image'] += 1
    
    print(f"\nüìà RESUMEN TOP 50 ART√çCULOS DEL MOSAICO:")
    print(f"üî• Alto riesgo: {total_stats['high']} art√≠culos")
    print(f"‚ö†Ô∏è Medio riesgo: {total_stats['medium']} art√≠culos") 
    print(f"üü¢ Bajo riesgo: {total_stats['low']} art√≠culos")
    print(f"üñºÔ∏è Con imagen: {total_stats['with_image']}/50 ({total_stats['with_image']/50*100:.1f}%)")
    
    # 4. Verificar art√≠culos sin imagen que necesitar√≠an fallback
    print("\nüìä VERIFICACI√ìN 4: Art√≠culos sin imagen (necesitan fallback)")
    print("-" * 50)
    
    cursor.execute('''
        SELECT COUNT(*) 
        FROM articles 
        WHERE (image_url IS NULL OR image_url = '')
        AND risk_level IN ('high', 'medium')
    ''')
    articles_without_image = cursor.fetchone()[0]
    
    print(f"‚ö†Ô∏è Art√≠culos de alto/medio riesgo sin imagen: {articles_without_image}")
    
    if articles_without_image > 0:
        print("üí° Estos art√≠culos usar√°n im√°genes de fallback autom√°ticamente")
        
        # Mostrar algunos ejemplos
        cursor.execute('''
            SELECT id, title, risk_level
            FROM articles 
            WHERE (image_url IS NULL OR image_url = '')
            AND risk_level IN ('high', 'medium')
            LIMIT 5
        ''')
        
        examples = cursor.fetchall()
        print("üìù Ejemplos de art√≠culos que usar√°n fallback:")
        for article_id, title, risk_level in examples:
            emoji = "üî•" if risk_level == 'high' else "‚ö†Ô∏è"
            print(f"  {emoji} ID {article_id}: {title[:70]}...")
    
    # 5. Verificar funcionalidad de URLs
    print("\nüìä VERIFICACI√ìN 5: URLs de art√≠culos")
    print("-" * 50)
    
    cursor.execute('''
        SELECT 
            COUNT(*) as total,
            COUNT(CASE WHEN url IS NOT NULL AND url != '' THEN 1 END) as with_url
        FROM articles 
        WHERE risk_level IN ('high', 'medium', 'low')
    ''')
    
    total_articles, articles_with_url = cursor.fetchone()
    url_percent = (articles_with_url / total_articles * 100) if total_articles > 0 else 0
    
    print(f"üîó Art√≠culos con URL: {articles_with_url}/{total_articles} ({url_percent:.1f}%)")
    
    conn.close()
    
    # Resumen final
    print("\nüéØ RESUMEN DE VERIFICACI√ìN")
    print("=" * 70)
    
    success_score = 0
    total_checks = 5
    
    if high_risk_with_image > 0:
        success_score += 1
        print("‚úÖ Art√≠culos de alto riesgo tienen im√°genes")
    else:
        print("‚ùå No hay art√≠culos de alto riesgo con im√°genes")
    
    if total_stats.get('high', 0) > 0:
        success_score += 1
        print("‚úÖ Art√≠culos de alto riesgo aparecen primero en mosaico")
    else:
        print("‚ö†Ô∏è Pocos art√≠culos de alto riesgo en el mosaico")
    
    if total_stats.get('with_image', 0) >= 40:  # Al menos 80% con imagen
        success_score += 1
        print("‚úÖ Buena cobertura de im√°genes en el mosaico")
    else:
        print("‚ö†Ô∏è Cobertura de im√°genes en mosaico podr√≠a mejorar")
    
    if articles_without_image < total_high_risk * 0.5:  # Menos del 50% sin imagen
        success_score += 1
        print("‚úÖ Sistema de fallback de im√°genes funcionando")
    else:
        print("‚ö†Ô∏è Muchos art√≠culos sin imagen - revisar sistema de fallback")
    
    if url_percent >= 90:
        success_score += 1
        print("‚úÖ URLs disponibles para abrir en nueva pesta√±a")
    else:
        print("‚ö†Ô∏è Algunas URLs faltantes - revisar funcionalidad de links")
    
    print(f"\nüèÜ PUNTUACI√ìN FINAL: {success_score}/{total_checks} verificaciones pasadas")
    
    if success_score >= 4:
        print("üéâ ¬°Excelente! El mosaico est√° configurado correctamente")
    elif success_score >= 3:
        print("üëç Bien! El mosaico funciona con mejoras menores")
    else:
        print("‚ö†Ô∏è Necesita atenci√≥n - revisar configuraci√≥n del mosaico")

if __name__ == '__main__':
    verify_mosaic_changes()
