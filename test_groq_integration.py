"""
Test script para verificar la funcionalidad de Groq integrada
"""
import os
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Load environment variables
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Variables de entorno cargadas")
except ImportError:
    print("‚ö†Ô∏è python-dotenv no instalado")

def test_groq_integration():
    """Test de la integraci√≥n con Groq"""
    print("üß™ Iniciando test de integraci√≥n Groq...")
    
    # Check API key
    groq_api_key = os.getenv('GROQ_API_KEY')
    if groq_api_key:
        print(f"‚úÖ GROQ_API_KEY encontrada: {groq_api_key[:10]}...")
    else:
        print("‚ùå GROQ_API_KEY no encontrada")
        return False
    
    # Test basic import
    try:
        from groq import Groq
        print("‚úÖ Librer√≠a Groq importada correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Groq: {e}")
        return False
    
    # Test client creation
    try:
        client = Groq(api_key=groq_api_key)
        print("‚úÖ Cliente Groq creado correctamente")
    except Exception as e:
        print(f"‚ùå Error creando cliente Groq: {e}")
        return False
    
    # Test basic API call
    try:
        print("ü§ñ Probando llamada b√°sica a la API...")
        response = client.chat.completions.create(
            model="llama-3.1-8b-instant",
            messages=[
                {"role": "user", "content": "Hola, ¬øpuedes responder brevemente que funciona correctamente?"}
            ],
            max_tokens=50
        )
        
        result = response.choices[0].message.content
        print(f"‚úÖ Respuesta de Groq: {result}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en llamada a API Groq: {e}")
        return False

def test_app_methods():
    """Test de los m√©todos de la aplicaci√≥n"""
    print("\nüß™ Probando m√©todos de la aplicaci√≥n...")
    
    try:
        # Import the app class
        from app_moderncopia31alas945 import RiskMapUnifiedApplication
        print("‚úÖ Clase RiskMapUnifiedApplication importada")
        
        # Create instance
        app = RiskMapUnifiedApplication()
        print("‚úÖ Instancia de aplicaci√≥n creada")
        
        # Test get articles from DB
        articles = app.get_top_articles_from_db(limit=5)
        print(f"‚úÖ Art√≠culos obtenidos: {len(articles)}")
        
        if articles:
            print("üì∞ Ejemplo de art√≠culo:")
            for key, value in articles[0].items():
                if isinstance(value, str) and len(value) > 100:
                    value = value[:100] + "..."
                print(f"   {key}: {value}")
        
        # Test analysis method
        if articles:
            print("\nü§ñ Probando an√°lisis Groq...")
            analysis = app._generate_groq_geopolitical_analysis(articles[:3])
            print("‚úÖ An√°lisis generado:")
            print(f"   T√≠tulo: {analysis.get('title', 'N/A')}")
            print(f"   Subt√≠tulo: {analysis.get('subtitle', 'N/A')}")
            print(f"   Contenido: {len(analysis.get('content', ''))} caracteres")
            print(f"   Fuentes: {analysis.get('sources_count', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando m√©todos de la aplicaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ Test de Integraci√≥n Groq - RiskMap")
    print("=" * 50)
    
    # Test Groq
    groq_success = test_groq_integration()
    
    # Test app methods
    app_success = test_app_methods()
    
    print("\n" + "=" * 50)
    if groq_success and app_success:
        print("üéâ TODOS LOS TESTS PASARON CORRECTAMENTE")
        print("‚úÖ La integraci√≥n con Groq est√° funcionando")
        print("‚úÖ Los m√©todos de la aplicaci√≥n est√°n operativos")
    else:
        print("‚ùå ALGUNOS TESTS FALLARON")
        if not groq_success:
            print("‚ùå Problemas con la integraci√≥n de Groq")
        if not app_success:
            print("‚ùå Problemas con los m√©todos de la aplicaci√≥n")
