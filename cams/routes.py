"""
Camera Routes and WebSocket Handlers
====================================

Rutas Flask y handlers SocketIO para el sistema de c√°maras:
- API REST para gesti√≥n de c√°maras
- WebSocket para streaming en tiempo real
- Endpoints para alertas y grabaciones
"""

import os
import json
import cv2
import base64
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging
from flask import Blueprint, request, jsonify, render_template, send_file, Response
from flask_socketio import SocketIO, emit, join_room, leave_room
import numpy as np
from pathlib import Path

# Importar m√≥dulos locales
from .detector import RiskDetector
from .resolver import StreamResolver
from .recorder import VideoRecorder
from .alerts import AlertManager

logger = logging.getLogger(__name__)

# Crear Blueprint
cams_bp = Blueprint('cams', __name__, url_prefix='/cams')

# Variables globales para instancias de servicios
detector = None
resolver = None
recorder = None
alert_manager = None
socketio = None

# Estado de streams activos
active_streams = {}
stream_lock = threading.Lock()

def init_cams_services(app_socketio: SocketIO):
    """
    Inicializar servicios de c√°maras
    
    Args:
        app_socketio: Instancia de SocketIO de la aplicaci√≥n
    """
    global detector, resolver, recorder, alert_manager, socketio
    
    try:
        socketio = app_socketio
        detector = RiskDetector()
        resolver = StreamResolver()
        recorder = VideoRecorder()
        alert_manager = AlertManager()
        
        # Configurar callback de alertas para WebSocket
        alert_manager.add_notification_callback(_emit_alert_notification)
        
        logger.info("‚úÖ Servicios de c√°maras inicializados")
        
    except Exception as e:
        logger.error(f"‚ùå Error inicializando servicios de c√°maras: {e}")

def _emit_alert_notification(alert: Dict):
    """Callback para emitir alertas via WebSocket"""
    if socketio:
        try:
            socketio.emit('new_alert', alert, namespace='/cams')
            logger.debug(f"üî¥ Alerta emitida via WebSocket: {alert['id']}")
        except Exception as e:
            logger.error(f"‚ùå Error emitiendo alerta via WebSocket: {e}")

# =================== RUTAS REST API ===================

@cams_bp.route('/')
def cams_dashboard():
    """Dashboard principal de c√°maras"""
    return render_template('cams/cams_map.html')

@cams_bp.route('/live/<cam_id>')
def live_view(cam_id: str):
    """Vista en vivo de una c√°mara espec√≠fica"""
    return render_template('cams/cams_view.html', cam_id=cam_id)

@cams_bp.route('/review')
def review_page():
    """P√°gina de revisi√≥n de alertas y grabaciones"""
    return render_template('cams/review.html')

@cams_bp.route('/api/cameras')
def get_cameras():
    """Obtener lista de c√°maras configuradas"""
    try:
        cameras_file = Path("data/cameras.json")
        if not cameras_file.exists():
            return jsonify({"success": False, "error": "Archivo de c√°maras no encontrado"})
        
        with open(cameras_file, 'r', encoding='utf-8') as f:
            cameras_data = json.load(f)
        
        return jsonify({
            "success": True,
            "cameras": cameras_data.get("cameras", []),
            "total": len(cameras_data.get("cameras", []))
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo c√°maras: {e}")
        return jsonify({"success": False, "error": str(e)})

@cams_bp.route('/api/cameras/<cam_id>')
def get_camera(cam_id: str):
    """Obtener informaci√≥n de una c√°mara espec√≠fica"""
    try:
        cameras_file = Path("data/cameras.json")
        if not cameras_file.exists():
            return jsonify({"success": False, "error": "Archivo de c√°maras no encontrado"})
        
        with open(cameras_file, 'r', encoding='utf-8') as f:
            cameras_data = json.load(f)
        
        camera = next((c for c in cameras_data.get("cameras", []) if c["id"] == cam_id), None)
        
        if not camera:
            return jsonify({"success": False, "error": "C√°mara no encontrada"})
        
        # Agregar informaci√≥n de estado
        with stream_lock:
            stream_info = active_streams.get(cam_id, {})
        
        camera_info = camera.copy()
        camera_info["status"] = stream_info.get("status", "stopped")
        camera_info["last_update"] = stream_info.get("last_update")
        camera_info["viewer_count"] = stream_info.get("viewer_count", 0)
        
        return jsonify({
            "success": True,
            "camera": camera_info
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo c√°mara {cam_id}: {e}")
        return jsonify({"success": False, "error": str(e)})

@cams_bp.route('/api/cameras/<cam_id>/start', methods=['POST'])
def start_camera_stream(cam_id: str):
    """Iniciar stream de una c√°mara"""
    global detector, resolver, recorder
    
    try:
        # Obtener informaci√≥n de la c√°mara
        cameras_file = Path("data/cameras.json")
        with open(cameras_file, 'r', encoding='utf-8') as f:
            cameras_data = json.load(f)
        
        camera = next((c for c in cameras_data.get("cameras", []) if c["id"] == cam_id), None)
        
        if not camera:
            return jsonify({"success": False, "error": "C√°mara no encontrada"})
        
        # Verificar si ya est√° activa
        with stream_lock:
            if cam_id in active_streams:
                return jsonify({"success": False, "error": "Stream ya activo"})
        
        # Resolver URL del stream
        stream_url = camera.get("stream_url")
        if not stream_url:
            return jsonify({"success": False, "error": "URL de stream no configurada"})
        
        resolved_stream = resolver.resolve_url(stream_url)
        
        if not resolved_stream.get("success"):
            return jsonify({
                "success": False, 
                "error": f"No se pudo resolver stream: {resolved_stream.get('error')}"
            })
        
        # Crear entrada en streams activos
        with stream_lock:
            active_streams[cam_id] = {
                "camera": camera,
                "resolved_stream": resolved_stream,
                "status": "starting",
                "start_time": datetime.now(),
                "viewer_count": 0,
                "last_update": datetime.now().isoformat(),
                "thread": None
            }
        
        # Iniciar grabaci√≥n si est√° habilitada
        if camera.get("record_continuous", False):
            recorder.start_continuous_recording(
                cam_id, 
                resolved_stream["stream_url"], 
                resolved_stream.get("headers")
            )
        
        # Iniciar hilo de procesamiento de stream
        stream_thread = threading.Thread(
            target=_process_camera_stream,
            args=(cam_id,),
            daemon=True
        )
        
        with stream_lock:
            active_streams[cam_id]["thread"] = stream_thread
            active_streams[cam_id]["status"] = "running"
        
        stream_thread.start()
        
        logger.info(f"üìπ Stream iniciado para c√°mara {cam_id}")
        
        return jsonify({
            "success": True,
            "message": f"Stream iniciado para c√°mara {cam_id}",
            "stream_info": resolved_stream
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error iniciando stream para {cam_id}: {e}")
        return jsonify({"success": False, "error": str(e)})

@cams_bp.route('/api/cameras/<cam_id>/stop', methods=['POST'])
def stop_camera_stream(cam_id: str):
    """Detener stream de una c√°mara"""
    try:
        with stream_lock:
            if cam_id not in active_streams:
                return jsonify({"success": False, "error": "Stream no activo"})
            
            active_streams[cam_id]["status"] = "stopping"
        
        # Detener grabaci√≥n
        recorder.stop_recording(cam_id)
        
        # El hilo se detendr√° autom√°ticamente al cambiar el status
        time.sleep(1)  # Dar tiempo para que se detenga
        
        with stream_lock:
            if cam_id in active_streams:
                del active_streams[cam_id]
        
        logger.info(f"‚èπÔ∏è Stream detenido para c√°mara {cam_id}")
        
        return jsonify({
            "success": True,
            "message": f"Stream detenido para c√°mara {cam_id}"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error deteniendo stream para {cam_id}: {e}")
        return jsonify({"success": False, "error": str(e)})

@cams_bp.route('/api/cameras/<cam_id>/status')
def get_camera_status(cam_id: str):
    """Obtener estado de una c√°mara"""
    try:
        with stream_lock:
            stream_info = active_streams.get(cam_id, {})
        
        if not stream_info:
            return jsonify({
                "success": True,
                "status": "stopped",
                "message": "Stream no activo"
            })
        
        # Agregar informaci√≥n de detecci√≥n
        detection_stats = detector.get_statistics() if detector else {}
        active_detections = detector.get_active_detections(cam_id) if detector else {}
        
        return jsonify({
            "success": True,
            "status": stream_info.get("status"),
            "start_time": stream_info.get("start_time", datetime.now()).isoformat(),
            "viewer_count": stream_info.get("viewer_count", 0),
            "last_update": stream_info.get("last_update"),
            "detection_stats": detection_stats,
            "active_detections": active_detections
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo estado de {cam_id}: {e}")
        return jsonify({"success": False, "error": str(e)})

# =================== RUTAS DE ALERTAS ===================

@cams_bp.route('/api/alerts')
def get_alerts():
    """Obtener alertas con filtros"""
    try:
        # Obtener par√°metros de query
        resolved = request.args.get('resolved')
        cam_id = request.args.get('cam_id')
        alert_type = request.args.get('type')
        severity = request.args.get('severity')
        limit = int(request.args.get('limit', 50))
        offset = int(request.args.get('offset', 0))
        
        # Convertir resolved a boolean si est√° presente
        if resolved is not None:
            resolved = resolved.lower() == 'true'
        
        alerts = alert_manager.get_alerts(
            resolved=resolved,
            cam_id=cam_id,
            alert_type=alert_type,
            severity=severity,
            limit=limit,
            offset=offset
        )
        
        return jsonify({
            "success": True,
            "alerts": alerts,
            "total": len(alerts)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo alertas: {e}")
        return jsonify({"success": False, "error": str(e)})

@cams_bp.route('/api/alerts/<alert_id>/resolve', methods=['POST'])
def resolve_alert(alert_id: str):
    """Resolver una alerta"""
    try:
        data = request.get_json() or {}
        resolved_by = data.get('resolved_by', 'api_user')
        resolution_notes = data.get('notes', '')
        
        success = alert_manager.resolve_alert(alert_id, resolved_by, resolution_notes)
        
        if success:
            return jsonify({
                "success": True,
                "message": f"Alerta {alert_id} resuelta"
            })
        else:
            return jsonify({
                "success": False,
                "error": "No se pudo resolver la alerta"
            })
        
    except Exception as e:
        logger.error(f"‚ùå Error resolviendo alerta {alert_id}: {e}")
        return jsonify({"success": False, "error": str(e)})

@cams_bp.route('/api/alerts/statistics')
def get_alert_statistics():
    """Obtener estad√≠sticas de alertas"""
    try:
        stats = alert_manager.get_alert_statistics()
        
        return jsonify({
            "success": True,
            "statistics": stats
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo estad√≠sticas de alertas: {e}")
        return jsonify({"success": False, "error": str(e)})

# =================== RUTAS DE GRABACIONES ===================

@cams_bp.route('/api/recordings/<cam_id>')
def get_recordings(cam_id: str):
    """Obtener grabaciones de una c√°mara"""
    try:
        limit = int(request.args.get('limit', 20))
        recordings = recorder.get_recordings(cam_id, limit)
        
        return jsonify({
            "success": True,
            "recordings": recordings,
            "total": len(recordings)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo grabaciones para {cam_id}: {e}")
        return jsonify({"success": False, "error": str(e)})

@cams_bp.route('/api/recordings/storage/stats')
def get_storage_stats():
    """Obtener estad√≠sticas de almacenamiento"""
    try:
        stats = recorder.get_storage_stats()
        
        return jsonify({
            "success": True,
            "storage_stats": stats
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo estad√≠sticas de almacenamiento: {e}")
        return jsonify({"success": False, "error": str(e)})

# =================== WEBSOCKET HANDLERS ===================

@socketio.on('connect', namespace='/cams')
def handle_connect():
    """Cliente conectado a WebSocket"""
    logger.debug(f"üîå Cliente conectado a /cams: {request.sid}")
    emit('connected', {'message': 'Conectado al sistema de c√°maras'})

@socketio.on('disconnect', namespace='/cams')
def handle_disconnect():
    """Cliente desconectado de WebSocket"""
    logger.debug(f"üîå Cliente desconectado de /cams: {request.sid}")
    
    # Remover de todas las salas
    with stream_lock:
        for cam_id in active_streams:
            if active_streams[cam_id]["viewer_count"] > 0:
                active_streams[cam_id]["viewer_count"] -= 1

@socketio.on('join_camera', namespace='/cams')
def handle_join_camera(data):
    """Cliente se une al stream de una c√°mara"""
    try:
        cam_id = data.get('cam_id')
        if not cam_id:
            emit('error', {'message': 'cam_id requerido'})
            return
        
        join_room(f"camera_{cam_id}")
        
        with stream_lock:
            if cam_id in active_streams:
                active_streams[cam_id]["viewer_count"] += 1
        
        emit('joined_camera', {'cam_id': cam_id, 'message': f'Unido a c√°mara {cam_id}'})
        logger.debug(f"üëÅÔ∏è Cliente {request.sid} se uni√≥ a c√°mara {cam_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error en join_camera: {e}")
        emit('error', {'message': str(e)})

@socketio.on('leave_camera', namespace='/cams')
def handle_leave_camera(data):
    """Cliente abandona el stream de una c√°mara"""
    try:
        cam_id = data.get('cam_id')
        if not cam_id:
            return
        
        leave_room(f"camera_{cam_id}")
        
        with stream_lock:
            if cam_id in active_streams and active_streams[cam_id]["viewer_count"] > 0:
                active_streams[cam_id]["viewer_count"] -= 1
        
        emit('left_camera', {'cam_id': cam_id})
        logger.debug(f"üëÅÔ∏è Cliente {request.sid} abandon√≥ c√°mara {cam_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error en leave_camera: {e}")

@socketio.on('request_frame', namespace='/cams')
def handle_request_frame(data):
    """Cliente solicita frame actual de una c√°mara"""
    try:
        cam_id = data.get('cam_id')
        if not cam_id:
            emit('error', {'message': 'cam_id requerido'})
            return
        
        # Verificar que el stream est√© activo
        with stream_lock:
            if cam_id not in active_streams:
                emit('error', {'message': f'Stream {cam_id} no activo'})
                return
        
        # El frame se enviar√° autom√°ticamente por el hilo de procesamiento
        emit('frame_requested', {'cam_id': cam_id})
        
    except Exception as e:
        logger.error(f"‚ùå Error en request_frame: {e}")
        emit('error', {'message': str(e)})

# =================== FUNCIONES DE PROCESAMIENTO ===================

def _process_camera_stream(cam_id: str):
    """
    Procesar stream de c√°mara en hilo separado
    
    Args:
        cam_id: ID de la c√°mara a procesar
    """
    try:
        with stream_lock:
            stream_info = active_streams.get(cam_id)
        
        if not stream_info:
            return
        
        camera = stream_info["camera"]
        resolved_stream = stream_info["resolved_stream"]
        
        # Abrir stream de video
        cap = cv2.VideoCapture(resolved_stream["stream_url"])
        
        if not cap.isOpened():
            logger.error(f"‚ùå No se pudo abrir stream para {cam_id}")
            with stream_lock:
                if cam_id in active_streams:
                    active_streams[cam_id]["status"] = "error"
            return
        
        # Configurar captura
        cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # Buffer m√≠nimo
        
        logger.info(f"üìπ Procesamiento iniciado para c√°mara {cam_id}")
        
        frame_count = 0
        last_detection_time = time.time()
        
        while True:
            # Verificar si debe continuar
            with stream_lock:
                current_status = active_streams.get(cam_id, {}).get("status")
            
            if current_status != "running":
                break
            
            # Leer frame
            ret, frame = cap.read()
            
            if not ret:
                logger.warning(f"‚ö†Ô∏è No se pudo leer frame de {cam_id}")
                time.sleep(1)
                continue
            
            frame_count += 1
            current_time = time.time()
            
            # Procesar detecci√≥n cada 2 segundos
            if current_time - last_detection_time >= 2.0:
                try:
                    # Ejecutar detecci√≥n
                    detection_result = detector.detect_frame(frame, cam_id)
                    
                    # Procesar alertas
                    alerts = detection_result.get("alerts", [])
                    for alert in alerts:
                        # Crear alerta en el sistema
                        alert_id = alert_manager.create_alert(
                            cam_id=cam_id,
                            alert_type=alert["type"],
                            severity=alert["severity"],
                            title=alert.get("description", "Alerta detectada"),
                            description=alert.get("description", ""),
                            confidence=alert.get("confidence", 1.0),
                            metadata=alert.get("metadata", {}),
                            zone_id=camera.get("zone")
                        )
                        
                        # Grabar clip de alerta si est√° habilitado
                        if camera.get("record_alerts", True):
                            recorder.record_alert_clip(cam_id, alert)
                    
                    # Emitir detecciones via WebSocket
                    if socketio and detection_result.get("detections"):
                        socketio.emit('detections', {
                            'cam_id': cam_id,
                            'detections': detection_result["detections"],
                            'tracking': detection_result.get("tracking", []),
                            'timestamp': datetime.now().isoformat()
                        }, room=f"camera_{cam_id}", namespace='/cams')
                    
                    last_detection_time = current_time
                    
                except Exception as e:
                    logger.error(f"‚ùå Error en detecci√≥n para {cam_id}: {e}")
            
            # Enviar frame via WebSocket (cada 5 frames para reducir carga)
            if frame_count % 5 == 0 and socketio:
                try:
                    # Redimensionar frame para WebSocket
                    height, width = frame.shape[:2]
                    if width > 640:
                        ratio = 640 / width
                        new_width = 640
                        new_height = int(height * ratio)
                        frame_resized = cv2.resize(frame, (new_width, new_height))
                    else:
                        frame_resized = frame
                    
                    # Codificar a JPEG
                    _, buffer = cv2.imencode('.jpg', frame_resized, [cv2.IMWRITE_JPEG_QUALITY, 80])
                    frame_b64 = base64.b64encode(buffer).decode('utf-8')
                    
                    # Emitir frame
                    socketio.emit('frame', {
                        'cam_id': cam_id,
                        'frame': frame_b64,
                        'timestamp': datetime.now().isoformat()
                    }, room=f"camera_{cam_id}", namespace='/cams')
                    
                except Exception as e:
                    logger.error(f"‚ùå Error enviando frame para {cam_id}: {e}")
            
            # Actualizar timestamp
            with stream_lock:
                if cam_id in active_streams:
                    active_streams[cam_id]["last_update"] = datetime.now().isoformat()
            
            # Control de FPS (procesar a ~10 FPS)
            time.sleep(0.1)
        
        # Limpiar
        cap.release()
        
        with stream_lock:
            if cam_id in active_streams:
                active_streams[cam_id]["status"] = "stopped"
        
        logger.info(f"üìπ Procesamiento finalizado para c√°mara {cam_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error en procesamiento de stream {cam_id}: {e}")
        with stream_lock:
            if cam_id in active_streams:
                active_streams[cam_id]["status"] = "error"

def get_active_streams_status():
    """Obtener estado de todos los streams activos"""
    with stream_lock:
        return {
            cam_id: {
                "status": info["status"],
                "viewer_count": info["viewer_count"],
                "last_update": info["last_update"],
                "camera_name": info["camera"].get("name", cam_id)
            }
            for cam_id, info in active_streams.items()
        }

def cleanup_cams_services():
    """Limpiar servicios de c√°maras"""
    global detector, resolver, recorder, alert_manager
    
    # Detener todos los streams
    with stream_lock:
        for cam_id in list(active_streams.keys()):
            if active_streams[cam_id]["status"] == "running":
                active_streams[cam_id]["status"] = "stopping"
        active_streams.clear()
    
    # Limpiar servicios
    if detector:
        detector.cleanup()
    if recorder:
        recorder.cleanup()
    if alert_manager:
        alert_manager.cleanup()
    
    logger.info("üßπ Servicios de c√°maras limpiados")
